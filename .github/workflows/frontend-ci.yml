# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: frontend-ci

on:
  # 切换分支
  push:
    branches: ["prod"]

jobs:
  build:
    if: github.ref == 'refs/heads/prod' # 仅在 prod 分支触发
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
      - uses: actions/cache@v2
        id: cache
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # 感觉不需要 直接在服务器跑
      # - name: Install Dependencies
      #   run: npm install --force

      # - name: Build
      #   run: npm run build --if-present

      - name: deploy file to server
        uses: easingthemes/ssh-deploy@v2.0.7
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          ARGS: "-avz --delete"
          SOURCE: "./"
          REMOTE_HOST: ${{ secrets.SERVER_IP }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          TARGET: ${{ secrets.REMOTE_TARGET }}

      # nginx记得build
      # docker build -f docker/frontend.nginx.Dockerfile . -t frontend-course-nginx-image

      # 暂时不需要push到阿里云
      # - name: Login to Aliyun Container Registry (ACR)
      #   uses: aliyun/acr-login@v1
      #   with:
      #     login-server: https://registry.cn-hangzhou.aliyuncs.com
      #     region-id: cn-hangzhou
      #     username: "${{ secrets.ACR_USERNAME }}"
      #     password: "${{ secrets.ACR_PASSWORD }}"

      # - name: Build Docker images and Push
      #   run: |
      #     short_commit=$(git rev-parse --short HEAD)
      #     pipeline_id="${GITHUB_RUN_ID:-0}"
      #     tag="v${pipeline_id}-${short_commit}"
      #     docker build -f docker/frontend.build.Dockerfile -t frontend-course-image .
      #     docker tag frontend-course-image registry.cn-hangzhou.aliyuncs.com/elite_study/frontend:${tag}
      #     docker push registry.cn-hangzhou.aliyuncs.com/elite_study/frontend:${tag}

      # 感觉docker compose停止可能有问题
      - name: Clean up previous Docker containers and Docker Run
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            whoami # 输出当前用户
            cd ${{ secrets.REMOTE_TARGET }} # 进入目标目录
            docker-compose -f docker/docker-compose.frontend.yml down # 停止并删除所有服务的容器和网络
            docker-compose -f docker/docker-compose.frontend.yml down --rmi all
            docker build -f docker/frontend.build.Dockerfile -t frontend-course-image . # 根据 Dockerfile 构建新的镜像并标记为 frontend-course-image
            docker-compose -f docker/docker-compose.frontend.yml up -d # 使用 docker-compose 启动服务，后台运行
